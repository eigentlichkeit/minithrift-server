/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef calculator_TYPES_H
#define calculator_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace foo { namespace bar { namespace baz {

class ArithmeticException;

typedef struct _ArithmeticException__isset {
  _ArithmeticException__isset() : message(false) {}
  bool message;
} _ArithmeticException__isset;

class ArithmeticException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ArithmeticException(const ArithmeticException&);
  ArithmeticException& operator=(const ArithmeticException&);
  ArithmeticException() : message() {
  }

  virtual ~ArithmeticException() throw();
  std::string message;

  _ArithmeticException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const ArithmeticException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ArithmeticException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArithmeticException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ArithmeticException &a, ArithmeticException &b);

}}} // namespace

#endif
