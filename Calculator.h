/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include "calculator_types.h"

namespace foo { namespace bar { namespace baz {

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual double perform(const Operation& o) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  double perform(const Operation& /* o */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _Calculator_perform_args__isset {
  _Calculator_perform_args__isset() : o(false) {}
  bool o;
} _Calculator_perform_args__isset;

class Calculator_perform_args {
 public:

  static const char* ascii_fingerprint; // = "D19F1C797C80B4E07CD6CBFF072A3CCD";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x9F,0x1C,0x79,0x7C,0x80,0xB4,0xE0,0x7C,0xD6,0xCB,0xFF,0x07,0x2A,0x3C,0xCD};

  Calculator_perform_args(const Calculator_perform_args&);
  Calculator_perform_args& operator=(const Calculator_perform_args&);
  Calculator_perform_args() {
  }

  virtual ~Calculator_perform_args() throw();
  Operation o;

  _Calculator_perform_args__isset __isset;

  void __set_o(const Operation& val);

  bool operator == (const Calculator_perform_args & rhs) const
  {
    if (!(o == rhs.o))
      return false;
    return true;
  }
  bool operator != (const Calculator_perform_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_perform_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_perform_pargs {
 public:

  static const char* ascii_fingerprint; // = "D19F1C797C80B4E07CD6CBFF072A3CCD";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x9F,0x1C,0x79,0x7C,0x80,0xB4,0xE0,0x7C,0xD6,0xCB,0xFF,0x07,0x2A,0x3C,0xCD};


  virtual ~Calculator_perform_pargs() throw();
  const Operation* o;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_perform_result__isset {
  _Calculator_perform_result__isset() : success(false), ae(false), iae(false) {}
  bool success;
  bool ae;
  bool iae;
} _Calculator_perform_result__isset;

class Calculator_perform_result {
 public:

  static const char* ascii_fingerprint; // = "61B657542C2D21FED4B38119FE804DB5";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0xB6,0x57,0x54,0x2C,0x2D,0x21,0xFE,0xD4,0xB3,0x81,0x19,0xFE,0x80,0x4D,0xB5};

  Calculator_perform_result(const Calculator_perform_result&);
  Calculator_perform_result& operator=(const Calculator_perform_result&);
  Calculator_perform_result() : success(0) {
  }

  virtual ~Calculator_perform_result() throw();
  double success;
  ArithmeticException ae;
  IllegalArgumentException iae;

  _Calculator_perform_result__isset __isset;

  void __set_success(const double val);

  void __set_ae(const ArithmeticException& val);

  void __set_iae(const IllegalArgumentException& val);

  bool operator == (const Calculator_perform_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ae == rhs.ae))
      return false;
    if (!(iae == rhs.iae))
      return false;
    return true;
  }
  bool operator != (const Calculator_perform_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_perform_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_perform_presult__isset {
  _Calculator_perform_presult__isset() : success(false), ae(false), iae(false) {}
  bool success;
  bool ae;
  bool iae;
} _Calculator_perform_presult__isset;

class Calculator_perform_presult {
 public:

  static const char* ascii_fingerprint; // = "61B657542C2D21FED4B38119FE804DB5";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0xB6,0x57,0x54,0x2C,0x2D,0x21,0xFE,0xD4,0xB3,0x81,0x19,0xFE,0x80,0x4D,0xB5};


  virtual ~Calculator_perform_presult() throw();
  double* success;
  ArithmeticException ae;
  IllegalArgumentException iae;

  _Calculator_perform_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double perform(const Operation& o);
  void send_perform(const Operation& o);
  double recv_perform();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_perform(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["perform"] = &CalculatorProcessor::process_perform;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double perform(const Operation& o) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->perform(o);
    }
    return ifaces_[i]->perform(o);
  }

};

}}} // namespace

#endif
