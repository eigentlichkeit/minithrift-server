/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include "calculator_types.h"

namespace foo { namespace bar { namespace baz {

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual double add(const double a, const double b) = 0;
  virtual double sub(const double a, const double b) = 0;
  virtual double mul(const double a, const double b) = 0;
  virtual double div(const double a, const double b) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  double add(const double /* a */, const double /* b */) {
    double _return = (double)0;
    return _return;
  }
  double sub(const double /* a */, const double /* b */) {
    double _return = (double)0;
    return _return;
  }
  double mul(const double /* a */, const double /* b */) {
    double _return = (double)0;
    return _return;
  }
  double div(const double /* a */, const double /* b */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _Calculator_add_args__isset {
  _Calculator_add_args__isset() : a(false), b(false) {}
  bool a;
  bool b;
} _Calculator_add_args__isset;

class Calculator_add_args {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Calculator_add_args(const Calculator_add_args&);
  Calculator_add_args& operator=(const Calculator_add_args&);
  Calculator_add_args() : a(0), b(0) {
  }

  virtual ~Calculator_add_args() throw();
  double a;
  double b;

  _Calculator_add_args__isset __isset;

  void __set_a(const double val);

  void __set_b(const double val);

  bool operator == (const Calculator_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};


  virtual ~Calculator_add_pargs() throw();
  const double* a;
  const double* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_add_result__isset {
  _Calculator_add_result__isset() : success(false) {}
  bool success;
} _Calculator_add_result__isset;

class Calculator_add_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  Calculator_add_result(const Calculator_add_result&);
  Calculator_add_result& operator=(const Calculator_add_result&);
  Calculator_add_result() : success(0) {
  }

  virtual ~Calculator_add_result() throw();
  double success;

  _Calculator_add_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculator_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_add_presult__isset {
  _Calculator_add_presult__isset() : success(false) {}
  bool success;
} _Calculator_add_presult__isset;

class Calculator_add_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~Calculator_add_presult() throw();
  double* success;

  _Calculator_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_sub_args__isset {
  _Calculator_sub_args__isset() : a(false), b(false) {}
  bool a;
  bool b;
} _Calculator_sub_args__isset;

class Calculator_sub_args {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Calculator_sub_args(const Calculator_sub_args&);
  Calculator_sub_args& operator=(const Calculator_sub_args&);
  Calculator_sub_args() : a(0), b(0) {
  }

  virtual ~Calculator_sub_args() throw();
  double a;
  double b;

  _Calculator_sub_args__isset __isset;

  void __set_a(const double val);

  void __set_b(const double val);

  bool operator == (const Calculator_sub_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Calculator_sub_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_sub_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_sub_pargs {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};


  virtual ~Calculator_sub_pargs() throw();
  const double* a;
  const double* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_sub_result__isset {
  _Calculator_sub_result__isset() : success(false) {}
  bool success;
} _Calculator_sub_result__isset;

class Calculator_sub_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  Calculator_sub_result(const Calculator_sub_result&);
  Calculator_sub_result& operator=(const Calculator_sub_result&);
  Calculator_sub_result() : success(0) {
  }

  virtual ~Calculator_sub_result() throw();
  double success;

  _Calculator_sub_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculator_sub_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_sub_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_sub_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_sub_presult__isset {
  _Calculator_sub_presult__isset() : success(false) {}
  bool success;
} _Calculator_sub_presult__isset;

class Calculator_sub_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~Calculator_sub_presult() throw();
  double* success;

  _Calculator_sub_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_mul_args__isset {
  _Calculator_mul_args__isset() : a(false), b(false) {}
  bool a;
  bool b;
} _Calculator_mul_args__isset;

class Calculator_mul_args {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Calculator_mul_args(const Calculator_mul_args&);
  Calculator_mul_args& operator=(const Calculator_mul_args&);
  Calculator_mul_args() : a(0), b(0) {
  }

  virtual ~Calculator_mul_args() throw();
  double a;
  double b;

  _Calculator_mul_args__isset __isset;

  void __set_a(const double val);

  void __set_b(const double val);

  bool operator == (const Calculator_mul_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Calculator_mul_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_mul_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_mul_pargs {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};


  virtual ~Calculator_mul_pargs() throw();
  const double* a;
  const double* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_mul_result__isset {
  _Calculator_mul_result__isset() : success(false) {}
  bool success;
} _Calculator_mul_result__isset;

class Calculator_mul_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  Calculator_mul_result(const Calculator_mul_result&);
  Calculator_mul_result& operator=(const Calculator_mul_result&);
  Calculator_mul_result() : success(0) {
  }

  virtual ~Calculator_mul_result() throw();
  double success;

  _Calculator_mul_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculator_mul_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_mul_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_mul_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_mul_presult__isset {
  _Calculator_mul_presult__isset() : success(false) {}
  bool success;
} _Calculator_mul_presult__isset;

class Calculator_mul_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~Calculator_mul_presult() throw();
  double* success;

  _Calculator_mul_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_div_args__isset {
  _Calculator_div_args__isset() : a(false), b(false) {}
  bool a;
  bool b;
} _Calculator_div_args__isset;

class Calculator_div_args {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Calculator_div_args(const Calculator_div_args&);
  Calculator_div_args& operator=(const Calculator_div_args&);
  Calculator_div_args() : a(0), b(0) {
  }

  virtual ~Calculator_div_args() throw();
  double a;
  double b;

  _Calculator_div_args__isset __isset;

  void __set_a(const double val);

  void __set_b(const double val);

  bool operator == (const Calculator_div_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Calculator_div_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_div_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_div_pargs {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};


  virtual ~Calculator_div_pargs() throw();
  const double* a;
  const double* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_div_result__isset {
  _Calculator_div_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Calculator_div_result__isset;

class Calculator_div_result {
 public:

  static const char* ascii_fingerprint; // = "505FDFAFB3792C9C02EC411D1B8DBD35";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x5F,0xDF,0xAF,0xB3,0x79,0x2C,0x9C,0x02,0xEC,0x41,0x1D,0x1B,0x8D,0xBD,0x35};

  Calculator_div_result(const Calculator_div_result&);
  Calculator_div_result& operator=(const Calculator_div_result&);
  Calculator_div_result() : success(0) {
  }

  virtual ~Calculator_div_result() throw();
  double success;
  ArithmeticException e;

  _Calculator_div_result__isset __isset;

  void __set_success(const double val);

  void __set_e(const ArithmeticException& val);

  bool operator == (const Calculator_div_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Calculator_div_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_div_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_div_presult__isset {
  _Calculator_div_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Calculator_div_presult__isset;

class Calculator_div_presult {
 public:

  static const char* ascii_fingerprint; // = "505FDFAFB3792C9C02EC411D1B8DBD35";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x5F,0xDF,0xAF,0xB3,0x79,0x2C,0x9C,0x02,0xEC,0x41,0x1D,0x1B,0x8D,0xBD,0x35};


  virtual ~Calculator_div_presult() throw();
  double* success;
  ArithmeticException e;

  _Calculator_div_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double add(const double a, const double b);
  void send_add(const double a, const double b);
  double recv_add();
  double sub(const double a, const double b);
  void send_sub(const double a, const double b);
  double recv_sub();
  double mul(const double a, const double b);
  void send_mul(const double a, const double b);
  double recv_mul();
  double div(const double a, const double b);
  void send_div(const double a, const double b);
  double recv_div();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sub(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mul(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_div(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["add"] = &CalculatorProcessor::process_add;
    processMap_["sub"] = &CalculatorProcessor::process_sub;
    processMap_["mul"] = &CalculatorProcessor::process_mul;
    processMap_["div"] = &CalculatorProcessor::process_div;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double add(const double a, const double b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

  double sub(const double a, const double b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sub(a, b);
    }
    return ifaces_[i]->sub(a, b);
  }

  double mul(const double a, const double b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mul(a, b);
    }
    return ifaces_[i]->mul(a, b);
  }

  double div(const double a, const double b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->div(a, b);
    }
    return ifaces_[i]->div(a, b);
  }

};

}}} // namespace

#endif
